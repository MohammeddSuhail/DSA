Cyclic Sort:
Use Cyclic Sort if the number is from 1-N or 0-N


Time Complexity: O(n)
Space Complexity: O(1)

Index: 0 1 2 3 4 
Value: 1 2 3 4 5 

i=0
while i<len(nums):
   correctIndex=nums[i]-1
   if correctIndex<len(nums) and nums[i]!=nums[correctIndex]:
          temp=nums[i]
          nums[i]=nums[correctIndex]
          nums[correctIndex]=temp
   else:
      i+=1


Index: 0 1 2 3 4 
Value: 0 1 2 3 4 

i=0
while i<len(nums):
   correctIndex=nums[i]
   if correctIndex<len(nums) and nums[i]!=nums[correctIndex]:
          temp=nums[i]
          nums[i]=nums[correctIndex]
          nums[correctIndex]=temp
   else:
      i+=1




In Java: For 0 to n-1 eles

int i=0, n=nums.length;
while(i < n){
     int correctIndex = nums[i];    
     if(correctIndex<n && nums[correctIndex]!=nums[i]){
         int temp=nums[i];
         nums[i]=nums[correctIndex];
         nums[correctIndex]=temp;
     }else{
         i++;
     }
}






268. Missing Number
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?

 

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

soln:

class Solution {
    public int missingNumber(int[] nums) {
        int i=0, correctIndex, temp;
        int n= nums.length;
        
        while(i < n){
            correctIndex = nums[i];    
            if(correctIndex<n && nums[correctIndex]!=nums[i]){
                temp=nums[i];
                nums[i]=nums[correctIndex];
                nums[correctIndex]=temp;
            }else{
                i++;
            }
        }
        
        for(int j=0;j<n;j++){
            if(nums[j]!=j)
                return j;
        }
        
        return n;
    }
}









448. Find All Numbers Disappeared in an Array
Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]


soln:
In this solution the missig numbers are automatically skipped since it will check it's proper position and find's that is already presenrt there

class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        missing=[]
        i=0
        while i<len(nums):
            correctIndex=nums[i]-1
            if nums[i]!=nums[correctIndex]:
                temp=nums[i]
                nums[i]=nums[correctIndex]
                nums[correctIndex]=temp
            else:
                i+=1
        #                        eg:     0    1
        #now the array is sorted so nums[i]= i+1, is not then i is missing         
        for i in range(len(nums)):
            if(nums[i]!=i+1):
                missing.append(i+1)
       
        return missing









287. Find the Duplicate Number
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.
 
Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [1,1]
Output: 1


soln:

class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        i=0
        while i<len(nums):
            correctIndex=nums[i]-1
            if nums[i]!=nums[correctIndex]:
                temp=nums[i]
                nums[i]=nums[correctIndex]
                nums[correctIndex]=temp
            else:
                if nums[i]!=i+1:   #if correct position already has nums[i], so nums[i] doesn't have i+1
                    return nums[i]
                else:           
                    i+=1

or

class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        i=0
        while i<len(nums):
            if nums[i]!=i+1:
                  correctIndex=nums[i]-1
                  if nums[i]!=nums[correctIndex]:
                       temp=nums[i]
                       nums[i]=nums[correctIndex]
                       nums[correctIndex]=temp
                  else:
                       return nums[i]
            else:           
                 i+=1



or


class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        i=0
        while i<len(nums):
            correctIndex=nums[i]-1
            if nums[i]!=nums[correctIndex]:
                temp=nums[i]
                nums[i]=nums[correctIndex]
                nums[correctIndex]=temp
            else:
                i+=1
        #after sorting just check which ele is not present in its proper position
        #dupicate number will be in wrong position since the proper position is already occupied
        for i in range(len(nums)):
            if nums[i]!=i+1:
                return nums[i]
 








442. Find All Duplicates in an Array
Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice,
return an array of all the integers that appears twice.
You must write an algorithm that runs in O(n) time and uses only constant extra space.

Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:
Input: nums = [1,1,2]
Output: [1]

soln:

class Solution(object):
    def findDuplicates(self, nums):

        l=[]
        i=0
        while i<len(nums):
            correct=nums[i]-1
            if nums[i]!=nums[correct]:
                temp=nums[i]
                nums[i]=nums[correct]
                nums[correct]=temp
            else:
                i+=1
        
        #array is sorted, the duplicate are those which are not in proper position
        for i in range(len(nums)):
            if nums[i]!=i+1:
                l.append(nums[i])
        return l
                
        






645. Set Mismatch
You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, 
one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]
Example 2:
Input: nums = [1,1]
Output: [1,2]

soln:

class Solution(object):
    def findErrorNums(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        l=[]
        i=0
        while i<len(nums):
            correct=nums[i]-1
            if nums[i]!=nums[correct]:
                temp=nums[i]
                nums[i]=nums[correct]
                nums[correct]=temp
            else:
                i+=1
        
        for i in range(len(nums)):
            if nums[i]!=i+1:
                l.append(nums[i])    #duplicate number
                l.append(i+1)        #missing number
        
        return l










41. First Missing Positive
Given an unsorted integer array nums, return the smallest missing positive integer.
You must implement an algorithm that runs in O(n) time and uses constant extra space.

Example 1:
Input: nums = [1,2,0]
Output: 3

Example 2:
Input: nums = [3,4,-1,1]
Output: 2

soln:
#We are using cyclic sort because we have to find misssing number from 0 to N

class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        i=0
        while i<len(nums):
            correct=nums[i]-1
            #ignoring negative elements and elements>len(nums)
            if nums[i]>=0 and nums[i]<len(nums) and nums[i]!=nums[correct]:
                temp=nums[i]
                nums[i]=nums[correct]
                nums[correct]=temp
            else:
                i+=1
        
        for i in range(len(nums)):
            if nums[i]!=i+1:
                return i+1
        
        return len(nums)+1    #if all ele from 1 to N is present smallest missing +ve number will be N+1
        
        